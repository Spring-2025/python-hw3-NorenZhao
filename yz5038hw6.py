# -*- coding: utf-8 -*-
"""yz5038HW6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/185O8mXEkccaqVqL4_RTLGlhqUTiiiYXm
"""

import pandas as pd
import yfinance as yf

#Get Return Question1
def YahooData2returns(YahooData):
  def get_stock_data(YahooData):
    data = yf.download(YahooData)
    prices = data['Adj Close'] if 'Adj Close' in data.columns else data['Close']
    return prices
  prices = get_stock_data(YahooData)
  pricevec = prices.values
  n = len(pricevec)
  ratiovec = pricevec[1:n] / pricevec[:n-1]
  returns = ratiovec - 1
  return returns


ticker = 'GS'
returns = YahooData2returns(ticker)
print (returns)

df = pd.DataFrame(returns, index=data.index[1:], columns=['Daily Return'])
df

#VaR Question2
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
def VaR(r, confidence, principal = 1):
  alpha = (1 - confidence) * 100
  var_percentile = np.percentile(r, alpha)
  var = abs(var_percentile)
  out = principal * var
  return out

def percent_var(r, confidence):
    plt.hist(r, bins=50, alpha=0.75)
    plt.xlabel('Returns')
    plt.ylabel('Frequency')
    plt.title('VaR')
    alpha = confidence
    out = np.percentile(r, (1 - alpha) * 100)
    return abs(out)

# Unit test fot Question2
r = np.random.normal(0.05, 0.03, 1000000)
probability2SD = norm.cdf(2)  # Probability under normal curve within 2 standard deviations
my_confidence = probability2SD
my_percent_var = percent_var(r, my_confidence )
print(np.round(my_percent_var, 2) == 0.01)

#ES Question3
import numpy as np
def es(losses, confidence=None, VaR=None, use_PnL=False):
  losses = np.asarray(losses)
  if VaR is None:
    VaR = np.percentile(losses, 100 * confidence)
  excess_losses = losses[losses > VaR]
  es_value = np.mean(excess_losses)
  return es_value

# Unit test for Questioin3
u = np.random.uniform(0, 100, 100000)

# Test the ES function with an confidence of 0.8
es_confidence = es(losses=u, confidence=0.8)
print('ES with confidence:', np.round(es_confidence, 0) == 90)

# Test the ES function with a VaR of 80
es_var = es(losses=u, VaR=80)
print('ES with VaR:', np.round(es_var, 0) == 90)